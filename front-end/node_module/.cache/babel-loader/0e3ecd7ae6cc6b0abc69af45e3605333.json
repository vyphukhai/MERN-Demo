{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { authConstants, car } from \"./constants\";\nexport const login = user => {\n  console.log(user);\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axios.post(`/signin`, { ...user\n    });\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: \"Failed to login\"\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.clear();\n    dispatch({\n      type: authConstants.LOGOUT_SUCCESS\n    });\n    dispatch({\n      type: cartConstants.RESET_CART\n    }); //const res = await axios.post(`/admin/signout`);\n    // if(res.status === 200){\n    // }else{\n    //     dispatch({\n    //         type: authConstants.LOGOUT_FAILURE,\n    //         payload: { error: res.data.error }\n    //     });\n    // }\n  };\n};","map":{"version":3,"sources":["C:/Users/DELL/Desktop/MERN-Demo/front-end/src/actions/auth.action.js"],"names":["axios","authConstants","car","login","user","console","log","dispatch","type","LOGIN_REQUEST","res","post","status","token","data","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","LOGIN_FAILURE","error","isUserLoggedIn","getItem","parse","signout","LOGOUT_REQUEST","removeItem","clear","LOGOUT_SUCCESS","cartConstants","RESET_CART"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,aAAT,EAAuBC,GAAvB,QAAkC,aAAlC;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,SAAO,MAAOG,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,aAAa,CAACQ;AAAtB,KAAD,CAAR;AACA,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAY,SAAZ,EAAsB,EACtC,GAAGP;AADmC,KAAtB,CAAlB;;AAIA,QAAIM,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM;AAAEC,QAAAA,KAAF;AAAST,QAAAA;AAAT,UAAkBM,GAAG,CAACI,IAA5B;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAed,IAAf,CAA7B;AACAG,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACkB,aADb;AAEPC,QAAAA,OAAO,EAAE;AACPP,UAAAA,KADO;AAEPT,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KAXD,MAWO;AACL,UAAIM,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtBL,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEP,aAAa,CAACoB,aADb;AAEPD,UAAAA,OAAO,EAAE;AAAEE,YAAAA,KAAK,EAAEZ,GAAG,CAACI,IAAJ,CAASQ;AAAlB;AAFF,SAAD,CAAR;AAID;AACF;AACF,GAzBD;AA0BD,CA7BM;AA+BP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,MAAOhB,QAAP,IAAoB;AACzB,UAAMM,KAAK,GAAGE,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIX,KAAJ,EAAW;AACT,YAAMT,IAAI,GAAGa,IAAI,CAACQ,KAAL,CAAWV,YAAY,CAACS,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACkB,aADb;AAEPC,QAAAA,OAAO,EAAE;AACPP,UAAAA,KADO;AAEPT,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KATD,MASO;AACLG,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,aAAa,CAACoB,aADb;AAEPD,QAAAA,OAAO,EAAE;AAAEE,UAAAA,KAAK,EAAE;AAAT;AAFF,OAAD,CAAR;AAID;AACF,GAjBD;AAkBD,CAnBM;AAoBP,OAAO,MAAMI,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAOnB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,aAAa,CAAC0B;AAAtB,KAAD,CAAR;AACAZ,IAAAA,YAAY,CAACa,UAAb,CAAwB,MAAxB;AACAb,IAAAA,YAAY,CAACa,UAAb,CAAwB,OAAxB;AACAb,IAAAA,YAAY,CAACc,KAAb;AACAtB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,aAAa,CAAC6B;AAAtB,KAAD,CAAR;AACAvB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEuB,aAAa,CAACC;AAAtB,KAAD,CAAR,CANyB,CAOzB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACD,GAhBD;AAiBD,CAlBM","sourcesContent":["import axios from \"../helpers/axios\";\r\nimport { authConstants,car } from \"./constants\";\r\n\r\nexport const login = (user) => {\r\n  console.log(user);\r\n\r\n  return async (dispatch) => {\r\n    dispatch({ type: authConstants.LOGIN_REQUEST });\r\n    const res = await axios.post(`/signin`, {\r\n      ...user,\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const { token, user } = res.data;\r\n      localStorage.setItem(\"token\", token);\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      dispatch({\r\n        type: authConstants.LOGIN_SUCCESS,\r\n        payload: {\r\n          token,\r\n          user,\r\n        },\r\n      });\r\n    } else {\r\n      if (res.status === 400) {\r\n        dispatch({\r\n          type: authConstants.LOGIN_FAILURE,\r\n          payload: { error: res.data.error },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const isUserLoggedIn = () => {\r\n  return async (dispatch) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      dispatch({\r\n        type: authConstants.LOGIN_SUCCESS,\r\n        payload: {\r\n          token,\r\n          user,\r\n        },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: authConstants.LOGIN_FAILURE,\r\n        payload: { error: \"Failed to login\" },\r\n      });\r\n    }\r\n  };\r\n};\r\nexport const signout = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: authConstants.LOGOUT_REQUEST });\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    localStorage.clear();\r\n    dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n    dispatch({ type: cartConstants.RESET_CART });\r\n    //const res = await axios.post(`/admin/signout`);\r\n    // if(res.status === 200){\r\n\r\n    // }else{\r\n    //     dispatch({\r\n    //         type: authConstants.LOGOUT_FAILURE,\r\n    //         payload: { error: res.data.error }\r\n    //     });\r\n    // }\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}