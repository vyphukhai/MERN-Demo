{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n\n      if (res.status === 200) {\n        const {\n          cartItems\n        } = res.data;\n        console.log({\n          getCartItems: cartItems\n        });\n\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: {\n              cartItems\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = function (product) {\n  let newQty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return async dispatch => {\n    const {\n      cart: {\n        cartItems\n      },\n      auth\n    } = store.getState(); //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n\n    if (auth.authenticate) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [{\n          product: product._id,\n          quantity: qty\n        }]\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\nexport const removeCartItem = payload => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.REMOVE_CART_ITEM_REQUEST\n      });\n      const res = await axios.post(`/user/cart/removeItem`, {\n        payload\n      });\n\n      if (res.status === 202) {\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_SUCCESS\n        });\n        dispatch(getCartItems());\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const updateCart = () => {\n  return async dispatch => {\n    const {\n      auth\n    } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem(\"cart\")) : null;\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\"); //dispatch(getCartItems());\n\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id\n            };\n          })\n        };\n\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } else {\n        dispatch(getCartItems());\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: {\n            cartItems\n          }\n        });\n      }\n    }\n  };\n};\nexport { getCartItems };","map":{"version":3,"sources":["C:/Users/DELL/Desktop/MERN-Demo/front-end/src/actions/cart.action.js"],"names":["axios","cartConstants","store","getCartItems","dispatch","type","ADD_TO_CART_REQUEST","res","post","status","cartItems","data","console","log","ADD_TO_CART_SUCCESS","payload","error","addToCart","product","newQty","cart","auth","getState","qty","_id","parseInt","authenticate","quantity","localStorage","setItem","JSON","stringify","removeCartItem","REMOVE_CART_ITEM_REQUEST","REMOVE_CART_ITEM_SUCCESS","REMOVE_CART_ITEM_FAILURE","updateCart","getItem","parse","removeItem","Object","keys","map","key","index","length"],"mappings":"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","sourcesContent":["import axios from \"../helpers/axios\";\r\nimport { cartConstants } from \"./constants\";\r\nimport store from \"../store\";\r\n\r\nconst getCartItems = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\r\n      const res = await axios.post(`/user/getCartItems`);\r\n      if (res.status === 200) {\r\n        const { cartItems } = res.data;\r\n        console.log({ getCartItems: cartItems });\r\n        if (cartItems) {\r\n          dispatch({\r\n            type: cartConstants.ADD_TO_CART_SUCCESS,\r\n            payload: { cartItems },\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const addToCart = (product, newQty = 1) => {\r\n  return async (dispatch) => {\r\n    const {\r\n      cart: { cartItems },\r\n      auth,\r\n    } = store.getState();\r\n    //console.log('action::products', products);\r\n    //const product = action.payload.product;\r\n    //const products = state.products;\r\n    const qty = cartItems[product._id]\r\n      ? parseInt(cartItems[product._id].qty + newQty)\r\n      : 1;\r\n    cartItems[product._id] = {\r\n      ...product,\r\n      qty,\r\n    };\r\n\r\n    if (auth.authenticate) {\r\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\r\n      const payload = {\r\n        // cartItems: Object.keys(cartItems).map((key, index) => {\r\n        //     return {\r\n        //         quantity: cartItems[key].qty,\r\n        //         product: cartItems[key]._id\r\n        //     }\r\n        // })\r\n        cartItems: [\r\n          {\r\n            product: product._id,\r\n            quantity: qty,\r\n          },\r\n        ],\r\n      };\r\n      console.log(payload);\r\n      const res = await axios.post(`/user/cart/addtocart`, payload);\r\n      console.log(res);\r\n      if (res.status === 201) {\r\n        dispatch(getCartItems());\r\n      }\r\n    } else {\r\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\r\n    }\r\n\r\n    console.log(\"addToCart::\", cartItems);\r\n\r\n    dispatch({\r\n      type: cartConstants.ADD_TO_CART_SUCCESS,\r\n      payload: { cartItems },\r\n    });\r\n  };\r\n};\r\n\r\nexport const removeCartItem = (payload) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\r\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\r\n      if (res.status === 202) {\r\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\r\n        dispatch(getCartItems());\r\n      } else {\r\n        const { error } = res.data;\r\n        dispatch({\r\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\r\n          payload: { error },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCart = () => {\r\n  return async (dispatch) => {\r\n    const { auth } = store.getState();\r\n    let cartItems = localStorage.getItem(\"cart\")\r\n      ? JSON.parse(localStorage.getItem(\"cart\"))\r\n      : null;\r\n\r\n    console.log(\"upppppppppp\");\r\n\r\n    if (auth.authenticate) {\r\n      localStorage.removeItem(\"cart\");\r\n      //dispatch(getCartItems());\r\n      if (cartItems) {\r\n        const payload = {\r\n          cartItems: Object.keys(cartItems).map((key, index) => {\r\n            return {\r\n              quantity: cartItems[key].qty,\r\n              product: cartItems[key]._id,\r\n            };\r\n          }),\r\n        };\r\n        if (Object.keys(cartItems).length > 0) {\r\n          const res = await axios.post(`/user/cart/addtocart`, payload);\r\n          if (res.status === 201) {\r\n            dispatch(getCartItems());\r\n          }\r\n        }\r\n      } else {\r\n        dispatch(getCartItems());\r\n      }\r\n    } else {\r\n      if (cartItems) {\r\n        dispatch({\r\n          type: cartConstants.ADD_TO_CART_SUCCESS,\r\n          payload: { cartItems },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport { getCartItems };"]},"metadata":{},"sourceType":"module"}