{"ast":null,"code":"import { categoryConstants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (id, categories, category) => {\n  let myCategories = [];\n\n  for (let cat of categories) {\n    if (cat.parentId && cat.parentId === id) {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategories(id, [...cat.children, {\n          _id: category._id,\n          name: category.name,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategories(id, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n}; // eslint-disable-next-line import/no-anonymous-default-export\n\n\nexport default ((state = initState, action) => {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const updatedCategories = buildNewCategories(state.categories, action.payload.category);\n      console.log(updatedCategories);\n      state = { ...state,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["C:/Users/DELL/Desktop/MERN-Demo/admin-app/src/reducers/category.reducer.js"],"names":["categoryConstants","initState","categories","loading","error","buildNewCategories","id","category","myCategories","cat","parentId","push","children","length","_id","name","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAC,EADG;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAMA,MAAMC,kBAAkB,GAAG,CAACC,EAAD,EAAIJ,UAAJ,EAAgBK,QAAhB,KAA2B;AAClD,MAAIC,YAAY,GAAG,EAAnB;;AACA,OAAI,IAAIC,GAAR,IAAeP,UAAf,EAA0B;AACtB,QAAGO,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,KAAiBJ,EAApC,EAAuC;AACnCE,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAAEH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAsB,CAAtC,GAA0CR,kBAAkB,CAACC,EAAD,EAAI,CAAC,GAAGG,GAAG,CAACG,QAAR,EAAiB;AACvFE,UAAAA,GAAG,EAAEP,QAAQ,CAACO,GADyE;AAEvFC,UAAAA,IAAI,EAAER,QAAQ,CAACQ,IAFwE;AAGvFL,UAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAHoE;AAIvFE,UAAAA,QAAQ,EAAEL,QAAQ,CAACK;AAJoE,SAAjB,CAAJ,EAKlEL,QALkE,CAA5D,GAKM;AAPF,OAAlB;AASH,KAVD,MAUK;AACDC,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAAEH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAsB,CAAtC,GAA0CR,kBAAkB,CAACC,EAAD,EAAIG,GAAG,CAACG,QAAR,EAAkBL,QAAlB,CAA5D,GAA0F;AAFtF,OAAlB;AAIH;AAEJ;;AAED,SAAOC,YAAP;AACH,CAvBD,C,CAyBA;;;AACA,gBAAe,CAACQ,KAAK,GAAGf,SAAT,EAAmBgB,MAAnB,KAA4B;AACvC;AACA,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKlB,iBAAiB,CAACmB,0BAAvB;AACIH,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,UAAU,EAAEe,MAAM,CAACG,OAAP,CAAelB;AAFvB,OAAR;AAIA;;AACA,SAAKF,iBAAiB,CAACqB,wBAAvB;AACIL,MAAAA,KAAK,GAAE,EACH,GAAGA,KADA;AAEHb,QAAAA,OAAO,EAAC;AAFL,OAAP;AAIA;;AACJ,SAAKH,iBAAiB,CAACsB,wBAAvB;AACI,YAAMC,iBAAiB,GAAGlB,kBAAkB,CAACW,KAAK,CAACd,UAAP,EAAmBe,MAAM,CAACG,OAAP,CAAeb,QAAlC,CAA5C;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYF,iBAAZ;AACAP,MAAAA,KAAK,GAAE,EACH,GAAGA,KADA;AAEHb,QAAAA,OAAO,EAAE;AAFN,OAAP;AAIA;;AACA,SAAKH,iBAAiB,CAAC0B,wBAAvB;AACAV,MAAAA,KAAK,GAAE,EACH,GAAGf;AADA,OAAP;AAGA;AAzBZ;;AA2BA,SAAOe,KAAP;AACH,CA9BD","sourcesContent":["import { categoryConstants } from \"../actions/constants\";\r\n\r\nconst initState = {\r\n    categories:[],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\nconst buildNewCategories = (id,categories, category)=>{\r\n    let myCategories = []\r\n    for(let cat of categories){\r\n        if(cat.parentId && cat.parentId === id){\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children && cat.children.length > 0 ? buildNewCategories(id,[...cat.children,{\r\n                    _id: category._id,\r\n                    name: category.name,\r\n                    parentId: category.parentId,\r\n                    children: category.children\r\n                }], category) : []\r\n            });\r\n        }else{\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children && cat.children.length > 0 ? buildNewCategories(id,cat.children, category) : []\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    return myCategories;\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (state = initState,action)=>{\r\n    // eslint-disable-next-line default-case\r\n    switch(action.type){\r\n        case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break;\r\n            case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\r\n                state ={\r\n                    ...state,\r\n                    loading:true\r\n                }\r\n                break;\r\n            case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\r\n                const updatedCategories = buildNewCategories(state.categories, action.payload.category);\r\n                console.log(updatedCategories);\r\n                state ={\r\n                    ...state, \r\n                    loading: false,\r\n                }\r\n                break;\r\n                case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\r\n                state ={\r\n                    ...initState\r\n                }\r\n                break;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}